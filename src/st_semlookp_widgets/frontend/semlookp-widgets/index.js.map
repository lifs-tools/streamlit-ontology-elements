{"version":3,"file":"index.js","sources":["../../src/api/OlsApi.ts","../../src/components/widgets/MetadataWidget/DescriptionWidget/DescriptionWidget.tsx","../../src/components/widgets/MetadataWidget/IriWidget/IriWidget.tsx","../../src/components/widgets/MetadataWidget/BreadcrumbWidget/BreadcrumbWidget.tsx","../../src/components/widgets/MetadataWidget/TabWidget/AlternativeNameTabWidget/AlternativeNameTabWidget.tsx","../../src/components/widgets/MetadataWidget/TabWidget/CrossRefWidget/CrossRefTabWidget.tsx","../../src/api/widget.ts","../../src/components/widgets/MetadataWidget/TabWidget/HierarchyWidget/HierarchyWidget.tsx","../../src/components/widgets/MetadataWidget/TabWidget/TabWidget.tsx","../../src/components/widgets/MetadataWidget/TitleWidget/TitleWidget.tsx","../../src/components/widgets/MetadataWidget/MetadataWidget.tsx","../../src/components/widgets/MetadataWidget/index.ts","../../src/components/widgets/AutocompleteWidget/AutocompleteWidget.tsx","../../src/components/widgets/JsonApiWidget/JsonApiWidget.tsx","../../src/components/widgets/DataContentWidget/DataContentWidget.tsx","../../src/components/widgets/ResourcesWidget/ResourcesWidget.tsx","../../src/components/widgets/OntologyInfoWidget/OntologyInfoWidget.tsx","../../src/components/widgets/SearchBarWidget/SearchBarWidget.tsx","../../src/utils/ApiUtils.tsx","../../src/components/widgets/SearchResultsListWidget/MetadataCompact.tsx","../../src/components/widgets/SearchResultsListWidget/SearchResultsListWidget.tsx","../../src/components/widgets/EntityInfoWidget/EntityInfoWidget.tsx","../../src/components/widgets/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\";\n\ninterface PaginationParams {\n  size?: string;\n  page?: string;\n}\n\ninterface SortingParams {\n  sortField: string | number;\n  sortDir?: \"asc\" | \"desc\";\n}\n\ninterface ContentParams {\n  ontologyId?: string;\n  termIri?: string;\n  propertyIri?: string;\n  individualIri?: string;\n  queryString?: string;\n\n}\n\nexport type apiCallFn = (paginationParams?: PaginationParams, sortingParams?: SortingParams, contentParams?: ContentParams, parameter?: string) => Promise<any>;\n\ninterface SearchQueryParams {\n  query: string;\n  exactMatch?: boolean;\n  showObsoleteTerms?: boolean;\n  types?: string;\n  ontology?: string;\n  groupByIri?: boolean;\n}\n\ninterface SelectQueryParams {\n  query: string;\n}\n\ninterface SuggestQueryParams {\n  query: string;\n}\n\ninterface JsTreeParams {\n  viewMode?: string;\n  siblings?: boolean;\n  child?: string;\n}\n\nconst DEFAULT_SEARCH_RESULTS_PER_PAGE = 10;\n\nexport class OlsApi {\n  private axiosInstance: AxiosInstance;\n\n  constructor(api: string) {\n    this.axiosInstance = axios.create({\n      baseURL: api,\n      headers: {\n        Accept: \"application/json\",\n        Content_Type: \"application/json\",\n      },\n    });\n  }\n\n  private buildParamsForGet(paginationParams?: PaginationParams, sortingParams?: SortingParams, contentParams?: ContentParams, parameter?: string) {\n    if (sortingParams) {\n      return { ...paginationParams, sort: `${sortingParams.sortField},${sortingParams.sortDir}`, ...contentParams, ...this.buildOtherParams(parameter)};\n    }\n    return { ...paginationParams, ...contentParams, ...this.buildOtherParams(parameter) };\n  }\n\n  private buildPaginationParams(paginationParams?: PaginationParams) {\n    const params: any = {\n      rows: paginationParams?.size,\n    };\n\n    if (paginationParams?.page) {\n      if (paginationParams.size) {\n        params.start = (+paginationParams.page * +paginationParams.size).toString();\n      } else {\n        params.start = (+paginationParams.page * DEFAULT_SEARCH_RESULTS_PER_PAGE).toString();\n      }\n    }\n\n    return params;\n  }\n\n  private buildParamsForSearch(queryParams: SearchQueryParams, paginationParams: PaginationParams, contentParams?: ContentParams, parameter?: string) {\n    const params: any = {\n      q: queryParams.query,\n      exact: queryParams.exactMatch,\n      obsoletes: queryParams.showObsoleteTerms,\n    };\n\n    if (queryParams.groupByIri) {\n      params.groupField = queryParams.groupByIri;\n    }\n\n    if (queryParams.types) {\n      params.type = queryParams.types;\n    }\n\n    if (queryParams.ontology) {\n      params.ontology = queryParams.ontology;\n    }\n\n    return { ...params, ...this.buildPaginationParams(paginationParams), ...contentParams, ...this.buildOtherParams(parameter) };\n  }\n\n  /**\n   * Function for creating an object from string of parameters for axios input params\n   * @param parameter\n   * @private\n   */\n  private buildOtherParams(parameter?: string){\n    const result: any = {};\n    if (parameter) {\n      const paramsSplitted = parameter.split(\"&\")\n\n      paramsSplitted.forEach((param: string) => {\n      const key: string = param.split(\"=\")[0]\n      const value: string = param.split(\"=\")[1]\n      result[key] = value})\n    }\n    return result\n  }\n\n  private buildParamsForSelect(queryParams: SuggestQueryParams, paginationParams?: PaginationParams, contentParams?: ContentParams, parameters?: string) {\n    const params: any = {\n      q: queryParams.query,\n    };\n\n    return { ...params, ...this.buildPaginationParams(paginationParams), ...contentParams,  ...this.buildOtherParams(parameters) };\n  }\n\n\n  private buildParamsForSuggest(queryParams: SuggestQueryParams, paginationParams?: PaginationParams, contentParams?: ContentParams, parameters?: string) {\n    const params: any = {\n      q: queryParams.query,\n    };\n\n    return { ...params, ...this.buildPaginationParams(paginationParams), ...contentParams,  ...this.buildOtherParams(parameters) };\n  }\n\n  public check_for_errors(response: any): any {\n    // resource not found/illegal argument exception in semanticlookup\n    if(response[\"error\"]) {\n      throw Error(response[\"status\"] + \" \" + response[\"error\"] + \" - \" + response[\"message\"] + \" - \" + response[\"exception\"] + \" at \" + response[\"path\"]);\n    }\n    // empty response - can be caught if this is expected, e.g. for fetching instances\n    if(response[\"page\"] !== undefined && response[\"page\"][\"totalElements\"] === 0) {\n      throw Error(\"Response contains 0 elements\");\n    }\n    return response;\n  }\n\n  public getOntologies: apiCallFn = async (paginationParams, sortingParams, contentParams, parameter) => {\n    const response = (await this.axiosInstance.get(\"ontologies\", { params: this.buildParamsForGet(paginationParams, sortingParams, contentParams, parameter) })).data;\n    return this.check_for_errors(response);\n  }\n\n  public getTerms: apiCallFn = async (paginationParams, sortingParams, contentParams) => {\n    const response = (await this.axiosInstance.get(\"terms\", { params: this.buildParamsForGet(paginationParams, sortingParams, contentParams) })).data;\n    return this.check_for_errors(response);\n  }\n\n  public getProperties: apiCallFn = async (paginationParams, sortingParams, contentParams) => {\n    const response = (await this.axiosInstance.get(\"properties\", { params: this.buildParamsForGet(paginationParams, sortingParams, contentParams) })).data;\n    return this.check_for_errors(response);\n  }\n\n  public getIndividuals: apiCallFn = async (paginationParams, sortingParams, contentParams) => {\n    const response = (await this.axiosInstance.get(\"individuals\", { params: this.buildParamsForGet(paginationParams, sortingParams, contentParams) })).data;\n    return this.check_for_errors(response);\n  }\n\n  public getOntology: apiCallFn = async (paginationParams, sortingParams, contentParams, parameter) => {\n    const response = (await this.axiosInstance.get(\"ontologies/\"+contentParams?.ontologyId, { params: this.buildOtherParams(parameter) })).data;\n    return this.check_for_errors(response);\n  }\n\n  /**\n   * getTerm, getProperty, getIndividual:\n   * These methods always require the respective object IRI in contentParams to be set\n   * If ontologyId is undefined in contentParams, the object will be queried from all ontologies, containing a list of results\n   * If an ontologyId is provided in contentParams, the returned list will only contain the object from that specific ontology\n   */\n\n  public getTerm: apiCallFn = async (paginationParams, sortingParams, contentParams, parameter) => {\n    const queryPrefix = contentParams?.ontologyId ? \"ontologies/\"+contentParams?.ontologyId+\"/\" : \"\"\n    const response = (await this.axiosInstance.get(queryPrefix+\"terms\", { params: {iri: contentParams?.termIri, parameter: this.buildOtherParams(parameter)} })).data;\n    return this.check_for_errors(response);\n  }\n\n  public getProperty: apiCallFn = async (paginationParams, sortingParams, contentParams, parameter) => {\n    const queryPrefix = contentParams?.ontologyId ? \"ontologies/\"+contentParams?.ontologyId+\"/\" : \"\"\n    const response = (await this.axiosInstance.get(queryPrefix+\"properties\", { params: {iri: contentParams?.propertyIri, parameter: this.buildOtherParams(parameter)} })).data;\n    return this.check_for_errors(response);\n  }\n\n  public getIndividual: apiCallFn = async (paginationParams, sortingParams, contentParams, parameter) => {\n    const queryPrefix = contentParams?.ontologyId ? \"ontologies/\"+contentParams?.ontologyId+\"/\" : \"\"\n    const response = (await this.axiosInstance.get(queryPrefix+\"individuals\", { params: {iri: contentParams?.individualIri, parameter: this.buildOtherParams(parameter)} })).data;\n    return this.check_for_errors(response);\n  }\n\n  public search = async (queryParams: SearchQueryParams, paginationParams: PaginationParams, contentParams?: ContentParams, parameter?: string, abortSignal?: AbortSignal): Promise<any> => {\n    return (await this.axiosInstance.get(\"search\", { params: this.buildParamsForSearch(queryParams, paginationParams, contentParams, parameter), signal: abortSignal })).data;\n  }\n\n  public select = async(queryParams: SelectQueryParams, paginationParams?: PaginationParams, contentParams?: ContentParams, parameter?: string): Promise<any> => {\n    return (await this.axiosInstance.get(\"select\", {params: this.buildParamsForSelect(queryParams, paginationParams, contentParams, parameter) })).data;\n  }\n\n  public suggest = async(queryParams: SuggestQueryParams, paginationParams?: PaginationParams, contentParams?: ContentParams, parameter?: string): Promise<any> => {\n    return (await this.axiosInstance.get(\"suggest\", { params: this.buildParamsForSuggest(queryParams, paginationParams, contentParams, parameter) })).data;\n  }\n\n  /**\n   * getTermTree:\n   * This method always requires an ontologyId in contentParams\n   * 1) If no termIri is defined in contentParams, the ontology roots will be queried\n   * 2) If a termIri is defined but no child in jsTreeParams, the hierarchy containing that term will be queried\n   * 3) If a termIri is defined and also a child in jsTreeParams, the subhierarchy of that child will be queried\n   */\n  public getTermTree = async (contentParams: ContentParams, treeParams: JsTreeParams, paginationParams?: PaginationParams, sortingParams?: SortingParams ) => {\n    let baseRequest = \"ontologies/\"+contentParams?.ontologyId+\"/terms\"\n    if (!contentParams.termIri) return (await this.axiosInstance.get(baseRequest+\"/roots\")).data; //1)\n    baseRequest = baseRequest+\"/\"+encodeURIComponent(encodeURIComponent(contentParams?.termIri))+\"/jstree\"\n    if (treeParams.child) return (await this.axiosInstance.get(baseRequest+\"/children/\"+treeParams.child)).data; //3)\n    else return (await this.axiosInstance.get(baseRequest, { params: treeParams })).data; //2)\n  }\n\n  public getTermRelations = async (contentParams: ContentParams, paginationParams?: PaginationParams, sortingParams?: SortingParams ) => {\n    let baseRequest = \"ontologies/\"+contentParams?.ontologyId+\"/terms\"\n    if (!contentParams.termIri) return (await this.axiosInstance.get(baseRequest+\"/roots\")).data; //1)\n    baseRequest = baseRequest+\"/\"+encodeURIComponent(encodeURIComponent(contentParams?.termIri))+\"/graph\"\n  }\n}\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport {EuiLoadingSpinner, EuiText} from \"@elastic/eui\";\nimport { EuiTextProps } from \"@elastic/eui/src/components/text/text\";\nimport { OlsApi } from \"../../../../api/OlsApi\";\nimport {getPreferredOntologyJSON} from \"../index\";\nimport {getErrorMessageToDisplay} from \"../../index\";\n\nexport interface DescriptionWidgetProps extends EuiTextProps {\n  iri?: string;\n  ontologyId?: string;\n  api: string;\n  descText?: string;\n  entityType:\n    | \"ontology\"\n    | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n    | \"individual\"\n    | \"property\"\n    | string;\n  parameter?: string\n}\n\nconst NO_DESCRIPTION = \"No description available.\";\n\nasync function getDescription(olsApi: OlsApi, entityType: string, ontologyId?: string, iri?: string, parameter?: string): Promise<any> {\n  if (entityType == \"ontology\"){\n    if(!ontologyId) {\n      throw Error(\"ontology id has to be provided\")\n    }\n    else {\n      const response = await olsApi.getOntology(undefined, undefined, {\n        ontologyId: ontologyId\n      }, parameter)\n      return {\n        description: response?.config.description || NO_DESCRIPTION\n      }\n    }\n  }\n  if (entityType === \"term\" || entityType === \"property\" || entityType === \"individual\") {\n    if(!iri) {\n      throw Error(\"iri has to be provided\")\n    }\n    else {\n      const response = await getPreferredOntologyJSON(olsApi, entityType, ontologyId, iri, parameter)\n      return {\n        description: response['description'] || NO_DESCRIPTION,\n        inDefiningOntology: response['is_defining_ontology'],\n        ontology: response['ontology_name']\n      }\n    }\n  }\n  //unacceptable object type\n  throw Error(\"Unexpected entity type. Should be one of 'ontology', 'term', 'class', 'individual', 'property'\");\n}\n\nfunction DescriptionWidget(props: DescriptionWidgetProps) {\n  const { api, ontologyId, iri, descText, entityType, parameter, ...rest } = props;\n  const fixedEntityType = entityType == \"class\" ? \"term\" : entityType\n  const olsApi = new OlsApi(api);\n\n  const {\n    data: response,\n    isLoading,\n    isError,\n    isSuccess,\n    error,\n  } = useQuery([api, \"description\", fixedEntityType, ontologyId, iri, parameter], () => {return getDescription(olsApi, fixedEntityType, ontologyId, iri, parameter); });\n\n    // TODO: Should DescriptionWidget show the following info message if defining ontology is not available (placed inside isSuccess span)?\n    /*{\n      !props.ontologyId && !descText && !response.inDefiningOntology && fixedEntityType !== \"ontology\" &&\n      <EuiFlexItem>\n        <EuiText>\n          <i>Defining ontology not available. Showing occurrence inside {response.ontology} instead.</i>\n        </EuiText>\n      </EuiFlexItem>\n    }*/\n\n  return (\n    <>\n      {isLoading && <EuiLoadingSpinner size=\"s\" />}\n      {isSuccess &&\n          <>\n            <EuiText {...rest}>{descText || response.description}</EuiText>\n          </>\n      }\n      {isError && <EuiText>{getErrorMessageToDisplay(error, \"description\")}</EuiText>}\n    </>\n  );\n}\n\nexport { DescriptionWidget };\n","import React from \"react\";\nimport { EuiFlexItem, EuiLink } from \"@elastic/eui\";\n\nexport interface IriWidgetProps {\n  iri: string;\n  iriText?: string;\n  color?:\n      | \"primary\"\n      | \"accent\"\n      | \"success\"\n      | \"warning\"\n      | \"danger\"\n      | \"ghost\"\n      | \"text\"\n      | \"subdued\";\n  parameter?: string\n}\n\nfunction IriWidget(props: IriWidgetProps) {\n  const { iri, iriText, color } = props;\n\n  return (\n    <EuiFlexItem grow={false}>\n      <div>\n        <EuiLink href={iri} target=\"_blank\" color={color}>\n          {iriText ? iriText : iri}\n        </EuiLink>\n      </div>\n    </EuiFlexItem>\n  );\n}\n\nexport { IriWidget };\n","import React from \"react\";\nimport {EuiBadge, EuiFlexItem, EuiLoadingSpinner, EuiText, EuiIconTip} from \"@elastic/eui\";\nimport {OlsApi} from \"../../../../api/OlsApi\";\nimport {useQuery} from \"react-query\";\nimport {getErrorMessageToDisplay} from \"../../index\";\nimport {getPreferredOntologyJSON} from \"../index\";\n\nexport interface BreadcrumbWidgetProps {\n  iri: string;\n  ontologyId?: string;\n  api: string;\n  entityType:\n      | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n      | \"individual\"\n      | \"property\"\n      | string;\n  colorFirst?:\n    | \"primary\"\n    | \"accent\"\n    | \"success\"\n    | \"warning\"\n    | \"danger\"\n    | \"ghost\"\n    | \"text\"\n    | \"subdued\"\n    | string;\n  colorSecond?: string;\n  /**\n   * This parameter specifies which set of ontologies should be shown for a specific frontend like 'nfdi4health'\n   */\n  parameter?: string\n}\n\nfunction BreadcrumbWidget(props: BreadcrumbWidgetProps) {\n  const { api, ontologyId, iri, entityType, colorFirst, colorSecond, parameter } = props;\n  const fixedEntityType = entityType == \"class\" ? \"term\" : entityType\n  const olsApi = new OlsApi(api);\n\n  const {\n    data: ontologyJSON,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    isError: isError,\n    error: error,\n  } = useQuery([api, \"short_form\", fixedEntityType, ontologyId, iri, parameter], () => { return getPreferredOntologyJSON(olsApi, fixedEntityType, ontologyId, iri, parameter); });\n\n  return (\n      <>\n        {isLoading &&\n            <span>\n                <EuiBadge color={colorFirst || ((props.ontologyId) ? \"primary\" : \"warning\")}>{props.ontologyId?.toUpperCase() || <EuiLoadingSpinner size={\"s\"}></EuiLoadingSpinner>}</EuiBadge>\n              {\" > \"}\n              <EuiBadge color={colorSecond || \"warning\"}>{<EuiLoadingSpinner size={\"s\"}></EuiLoadingSpinner>}</EuiBadge>\n            </span>\n        }\n        {isSuccess &&\n            <span>\n              {\n                  !props.ontologyId && !ontologyJSON[\"is_defining_ontology\"] &&\n                  <EuiFlexItem>\n                    <EuiText size={\"s\"}>\n                      <i>Defining ontology not available </i>\n                      <EuiIconTip type={\"iInCircle\"}\n                                  color={\"subdued\"}\n                                  content={`Showing occurence inside ${ontologyJSON[\"ontology_name\"]} instead.`}\n                      >\n                      </EuiIconTip>\n                    </EuiText>\n                  </EuiFlexItem>\n              }\n              <EuiBadge color={colorFirst || \"primary\"}>{ontologyJSON['ontology_name'].toUpperCase()}</EuiBadge>\n              {\" > \"}\n              <EuiBadge color={colorSecond || \"success\"}>{ontologyJSON['short_form'] ? ontologyJSON['short_form'].toUpperCase() : \"No short form available\"}</EuiBadge>\n            </span>\n        }\n        {isError &&\n            <span>\n                <EuiBadge color={colorFirst || ((props.ontologyId || (ontologyJSON && ontologyJSON['ontology_name'])) ? \"primary\" : \"danger\")}>{props.ontologyId?.toUpperCase() || (ontologyJSON && ontologyJSON['ontology_name']?.toUpperCase()) || getErrorMessageToDisplay(error, \"ontology\")}</EuiBadge>\n                {\" > \"}\n                <EuiBadge color={colorSecond || ((ontologyJSON && ontologyJSON['short_form']) ? \"success\" : \"danger\")}>{(ontologyJSON && ontologyJSON['short_form']) ? ontologyJSON['short_form'].toUpperCase() : getErrorMessageToDisplay(error, \"short form\")}</EuiBadge>\n            </span>\n        }\n      </>\n  );\n}\nexport { BreadcrumbWidget };\n","import React from \"react\";\nimport {EuiFlexGroup, EuiFlexItem, EuiLoadingSpinner, EuiPanel, EuiText} from \"@elastic/eui\";\nimport { OlsApi } from '../../../../../api/OlsApi'\nimport { useQuery } from 'react-query'\nimport {getPreferredOntologyJSON} from \"../../index\";\nimport {getErrorMessageToDisplay} from \"../../../index\";\n\nexport interface AlternativeNameTabWidgetProps {\n  iri: string;\n  api: string;\n  ontologyId?: string;\n  entityType:\n      | \"ontology\"\n      | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n      | \"individual\"\n      | \"property\"\n      | string;\n  parameter?: string;\n}\n\n\nfunction AlternativeNameTabWidget(props: AlternativeNameTabWidgetProps) {\n  const { iri, api, parameter, entityType, ontologyId } = props;\n  const olsApi = new OlsApi(api);\n\n  const {\n        data: ontologyJSON,\n        isLoading: isLoading,\n        isSuccess: isSuccess,\n        isError: isError,\n        error: error,\n    } = useQuery([api, iri, ontologyId, entityType, parameter, \"entityInfo\"], () => {\n        return getPreferredOntologyJSON(olsApi, entityType, ontologyId, iri, parameter);\n    });\n\n  function renderAltLabel() {\n    if (ontologyJSON['synonyms'] && ontologyJSON['synonyms'].length > 0) {\n      return ontologyJSON['synonyms'].map((value: string, index: number) => (\n        <EuiFlexItem key={value + index}>{value}</EuiFlexItem>\n      ));\n    }\n    return <EuiText>No alternative names exist.</EuiText>;\n  }\n\n    // TODO: Should AlternativeNameTabWidget show the following info message if defining ontology is not available (placed inside EuiPanel span)?\n    /*{\n        isSuccess && !props.ontologyId && !ontologyJSON[\"is_defining_ontology\"] &&\n        <EuiFlexItem>\n            <EuiText>\n                <i>Defining ontology not available. Showing occurrence inside {ontologyJSON[\"ontology_name\"]} instead.</i>\n            </EuiText>\n            <EuiSpacer size={\"s\"}></EuiSpacer>\n        </EuiFlexItem>\n    }*/\n\n  return (\n    <EuiPanel>\n      <EuiFlexGroup style={{ padding: 10 }} direction=\"column\">\n          {isSuccess && renderAltLabel()}\n          {isLoading && <EuiLoadingSpinner></EuiLoadingSpinner>}\n          {isError && <EuiText>{getErrorMessageToDisplay(error, \"alternative names\")}</EuiText>}\n      </EuiFlexGroup>\n    </EuiPanel>\n  );\n}\n\nexport { AlternativeNameTabWidget };\n","import React from \"react\";\nimport {\n    EuiFlexGroup,\n    EuiFlexItem,\n    EuiLink, EuiLoadingSpinner,\n    EuiPanel,\n    EuiText,\n} from \"@elastic/eui\";\nimport { OlsApi } from '../../../../../api/OlsApi'\nimport { useQuery } from 'react-query'\nimport {getPreferredOntologyJSON} from \"../../index\";\nimport {getErrorMessageToDisplay} from \"../../../index\";\n\nexport interface CrossRefWidgetProps {\n  iri: string;\n  api: string;\n  ontologyId?: string;\n  entityType:\n      | \"ontology\"\n      | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n      | \"individual\"\n      | \"property\"\n      | string;\n  parameter?: string;\n}\n\nfunction getCrossRefs(response: any) {\n    if (response && response['obo_xref']) {\n        return {\n            crossrefs: response['obo_xref'],\n        };\n    }\n    else {\n        return {\n            crossrefs : [],\n        };\n    }\n}\n\nfunction CrossRefTabWidget(props: CrossRefWidgetProps) {\n  const { iri, api, parameter, entityType, ontologyId } = props;\n  const olsApi = new OlsApi(api);\n\n  const {\n        data: ontologyJSON,\n        isLoading,\n        isSuccess,\n        isError,\n        error,\n    } = useQuery([api, iri, ontologyId, entityType, parameter, \"entityInfo\"], () => {\n        return getPreferredOntologyJSON(olsApi, entityType, ontologyId, iri, parameter);\n    });\n\n  function renderCrossRefs(data: any) {\n    if (data?.crossrefs && data.crossrefs.length > 0) {\n      return data?.crossrefs.map((item: any, index: any) => (\n        <EuiFlexItem key={index}>\n            {item.database ? (\n                item.url ? (\n                    <EuiLink href={item.url} external target=\"_blank\">\n                        {item.database}:{item.id}\n                    </EuiLink>\n                ) : (\n                    `${item.database}:${item.id}`\n                )\n            ) : (//just show the ID if there is no value for the database\n                item.url ? (\n                    <EuiLink href={item.url} external target=\"_blank\">\n                        {item.id}\n                    </EuiLink>\n                ) : (\n                    `${item.id}`\n                )\n            )}\n\n            </EuiFlexItem>\n      ));\n    }\n    return <EuiText>No cross references exist.</EuiText>;\n  }\n\n    // TODO: Should CrossRefTabWidget show the following info message if defining ontology is not available (placed inside EuiPanel span)?\n    /*{\n        isSuccess && !props.ontologyId && !ontologyJSON[\"is_defining_ontology\"] &&\n        <EuiFlexItem>\n            <EuiText>\n                <i>Defining ontology not available. Showing occurrence inside {ontologyJSON[\"ontology_name\"]} instead.</i>\n            </EuiText>\n            <EuiSpacer size={\"s\"}></EuiSpacer>\n        </EuiFlexItem>\n    }*/\n\n  return (\n    <EuiPanel>\n        <>\n            <EuiFlexGroup style={{ padding: 7 }} direction=\"column\">\n                {isSuccess && renderCrossRefs(getCrossRefs(ontologyJSON))}\n                {isLoading && <EuiLoadingSpinner/>}\n                {isError && <EuiText>{getErrorMessageToDisplay(error, \"cross references\")}</EuiText>}\n            </EuiFlexGroup>\n        </>\n    </EuiPanel>\n  );\n}\n\nexport { CrossRefTabWidget };\n","export function getClassName(classid: string) {\n  return fetch(\n    \"https://semanticlookup.zbmed.de/ols/api/ontologies/\" +\n      encodeURIComponent(classid),\n    {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((s) => s.json())\n    .then((s) => {\n      return { classID: classid, prefLabel: s.config?.title };\n    })\n    .catch((s) => {\n      return { classID: classid, prefLabel: undefined };\n    });\n}\n\nexport function fetchConceptById(id: string) {\n  return fetch(\n    \"https://semanticlookup.zbmed.de/ols/api/terms/\" +\n      encodeURIComponent(encodeURIComponent(id)),\n    {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((s) => s.json())\n    .then((s) => {\n      return { conceptId: id, concept: s?._embedded?.terms[0] };\n    });\n}\n\nexport function autocompleteConcept(\n  text: string,\n  ontology: string | undefined\n) {\n  let quert = \"\";\n  if (ontology !== undefined) {\n    quert = \"&ontology=\" + ontology;\n  }\n  return fetch(\n    \"https://semanticlookup.zbmed.de/ols/api/select?queryFields=label,synonym,short_form,obo_id&groupField=true&type=class&q=\" +\n      text +\n      quert,\n    {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((s) => s.json())\n    .then((s) => {\n      return s?.response?.docs.map((p: any) => mapOlsToIriAndNameTuple(p));\n    });\n}\n\nfunction mapOlsToIriAndNameTuple(item: any) {\n  return { iri: item?.iri, label: item?.label };\n}\n\nexport const fetch_data = (url: string) => {\n  return (\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      // eslint-disable-next-line node/handle-callback-err\n      .catch((err) => {\n        return [];\n      })\n  );\n};\n\n/**\n *\n * @param url Get url with http or https protocol\n * @returns concatinate s to http\n */\nexport const fix_url = (url: string) => {\n  if (url.substr(0, 5) === \"http:\") {\n    return url.replace(\"http\", \"https\");\n  } else {\n    return url;\n  }\n};\n\n/**\n *\n * @param url\n * @returns return url from https to /terms\n */\nexport const get_url_prefix = (url: string | undefined) => {\n  if (url === undefined) return \"\";\n  return fix_url(url.substring(0, url.search(\"/terms\") + 7));\n};\n","import { EuiPanel, EuiTreeView } from \"@elastic/eui\";\nimport { Node } from \"@elastic/eui/src/components/tree_view/tree_view\";\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { fetch_data, get_url_prefix } from \"../../../../../api/widget\";\nimport { OlsApi } from \"../../../../../api/OlsApi\";\n\n/**\n * Response from OLS\n */\ninterface SemanticResponse {\n  id: string;\n  parent: string;\n  iri: string;\n  text: string;\n  /* state: {\n    opened: boolean;\n  }; */\n  children: boolean;\n  /* a_attr: {\n    iri: string;\n    ontology_name: string;\n    title: string;\n    class: string;\n  }; */\n  // ontology_name: string;\n}\n\nclass HierarchyTree implements Node {\n  url: string;\n  iri: string;\n  label: React.ReactNode;\n  id: string;\n  isExpanded?: boolean = true;\n  children: Array<HierarchyTree> = [];\n  icon: React.ReactElement = (<>+</>);\n  iconWhenExpanded: React.ReactElement = (<>-</>);\n\n  constructor(label: React.ReactNode, id: string, url: string, iri: string) {\n    this.label = label;\n    this.id = id;\n    this.iri = iri;\n    this.url = url;\n  }\n\n  setchild(child: HierarchyTree) {\n    this.children.push(child);\n    if (this.children.length > 0) {\n      this.icon = <>+</>;\n    }\n  }\n\n  is_root() {\n    return this.id === \"#\";\n  }\n\n  to_string(): string {\n    return (\n      this.label + \"[ \" + this.children.map((value) => value.to_string()) + \" ]\"\n    );\n  }\n\n  callback() { //TODO handle via OlsApi.getTermTree with child param\n    if (this.isExpanded) return \"\";\n    const api_data_onclick =\n      this.url +\n      encodeURIComponent(encodeURIComponent(this.iri)) +\n      \"/jstree/children/\" +\n      this.id;\n    fetch_data(api_data_onclick).then((res) => {\n      this.children = [];\n      create_tree(this, res, this.url);\n    });\n    return \"\";\n  }\n}\n\nconst create_tree = (\n  tree: HierarchyTree,\n  arr: Array<SemanticResponse>,\n  url: string\n) => {\n  arr\n    .filter((value) => value.parent === tree.id)\n    .forEach((value) => {\n      tree.setchild(\n        new HierarchyTree(value.text, value.id, url, value.iri)\n      );\n    });\n    tree.children.map((value) => create_tree(value, arr, url));\n};\n\nexport interface HierarchyWidgetProps {\n  iri?: string;\n  ontologyId: string;\n  api: string;\n}\n\nasync function getTree(olsApi: OlsApi, ontologyId: string, iri?: string): Promise<any> {\n  const response = await olsApi.getTermTree({ontologyId: ontologyId, termIri: iri}, {viewMode: \"All\", siblings: false}, undefined, undefined)\n    .catch((error) => console.log(error));\n  if (iri) return response\n  else { //roots have been queried, and the response needs restructuring to become SemanticResponse\n    return response._embedded.terms.map(\n      (x: { iri: string, label: string, has_children: boolean }, i: number) =>\n        ({id: (++i).toString(), parent: '#', iri: x.iri, text: x.label, children: x.has_children})\n    );\n  }\n}\n\nconst HierarchyWidget = (props: HierarchyWidgetProps) => {\n  const { iri, ontologyId, api } = props;\n  const [treeItems, setTreeItems] = useState<HierarchyTree[]>();\n  const olsApi = new OlsApi(api);\n  const linkToSelf = api+\"ontologies/\"+ontologyId+\"/terms/\"\n\n  const fetchChildren = async (child: HierarchyTree) => { //could be given to HierarchyTree nodes for onClick callbacks\n    const response = await olsApi.getTermTree({ontologyId: ontologyId, termIri: iri}, {child: child.id}, undefined, undefined)\n      .catch((error) => console.log(error));\n    child.children = [];\n    create_tree(child, response, get_url_prefix(linkToSelf));\n  }\n\n  //initial tree query\n  useQuery<Array<SemanticResponse>>([api, \"getTermTree\", ontologyId, iri], () => {\n    return getTree(olsApi, ontologyId, iri)\n      .then((res) => {\n        const root = new HierarchyTree(\"#\", \"#\", \"\", \"\");\n        if (res) create_tree(root, res, get_url_prefix(linkToSelf));\n        setTreeItems(root.children);\n        return res;\n      });\n  });\n\n  return (\n    <EuiPanel>\n      {treeItems && (\n        <EuiTreeView\n          expandByDefault={true}\n          aria-label=\"HierarchyTab\"\n          items={treeItems}\n        />\n      )}\n    </EuiPanel>\n  );\n};\n\nexport { HierarchyWidget };\n","import React from \"react\";\nimport {\n  EuiFlexItem,\n  EuiTabbedContent, EuiText,\n} from \"@elastic/eui\";\nimport { AlternativeNameTabWidget } from \"./AlternativeNameTabWidget\";\nimport { CrossRefTabWidget } from \"./CrossRefWidget\";\nimport { HierarchyWidget } from \"./HierarchyWidget\";\nimport {useQuery} from \"react-query\";\nimport {OlsApi} from \"../../../../api/OlsApi\";\nimport {getPreferredOntologyJSON} from \"../index\";\n\nexport interface TabWidgetProps {\n  iri: string;\n  api: string;\n  ontologyId?: string;\n  entityType:\n      | \"ontology\"\n      | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n      | \"individual\"\n      | \"property\"\n      | string;\n  parameter?: string;\n}\n\nfunction TabWidget(props: TabWidgetProps) {\n  const { iri, api, ontologyId, entityType, parameter, ...rest } = props;\n  const fixedEntityType = entityType == \"class\" ? \"term\" : entityType\n  const olsApi = new OlsApi(api);\n\n  const {\n    data: ontologyJSON,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    isError: isError,\n    error: error,\n  } = useQuery(\n      [\n          api,\n          \"tab-widget\",\n          fixedEntityType,\n          ontologyId,\n          iri,\n          parameter\n      ],\n      () => { return getPreferredOntologyJSON(olsApi, fixedEntityType, ontologyId, iri, parameter); }\n  );\n\n  return (\n      <>\n          {\n              isSuccess && !props.ontologyId && ontologyJSON && !ontologyJSON[\"is_defining_ontology\"] &&\n              <EuiFlexItem>\n                  <EuiText>\n                      <i>Defining ontology not available. Showing occurrence inside {ontologyJSON[\"ontology_name\"]} instead.</i>\n                  </EuiText>\n              </EuiFlexItem>\n          }\n          <div>\n              <EuiFlexItem>\n                  <EuiTabbedContent size=\"s\" tabs={\n                      [\n                          {\n                              content: <AlternativeNameTabWidget\n                                  api={api}\n                                  iri={iri}\n                                  ontologyId={props.ontologyId || ((ontologyJSON && ontologyJSON['ontology_name']) ? ontologyJSON['ontology_name'] : \"\")}\n                                  entityType={entityType}\n                              />,\n                              id: \"tab1\",\n                              name: \"Alternative Names\",\n                          },\n                          {\n                              content: (\n                                  <HierarchyWidget api={api} iri={iri} ontologyId={props.ontologyId || ((ontologyJSON && ontologyJSON['ontology_name']) ? ontologyJSON['ontology_name'] : \"\")} />\n                              ),\n                              id: \"tab2\",\n                              name: \"Hierarchy\",\n                          },\n                          {\n                              content: <CrossRefTabWidget\n                                  api={api}\n                                  iri={iri}\n                                  ontologyId={props.ontologyId || ((ontologyJSON && ontologyJSON['ontology_name']) ? ontologyJSON['ontology_name'] : \"\")}\n                                  entityType={entityType}\n                              />,\n                              id: \"tab3\",\n                              name: \"Cross references\",\n                          },\n                      ]\n                  } />\n              </EuiFlexItem>\n          </div>\n      </>\n  );\n}\n\nexport { TabWidget };\n","import React from \"react\";\nimport {useQuery} from \"react-query\";\nimport {EuiLoadingSpinner, EuiText} from \"@elastic/eui\";\nimport {OlsApi} from \"../../../../api/OlsApi\";\nimport {getPreferredOntologyJSON} from \"../index\";\nimport {getErrorMessageToDisplay} from \"../../index\";\n\nexport interface TitleWidgetProps {\n    iri?: string;\n    ontologyId?: string;\n    api: string;\n    titleText?: string;\n    entityType:\n        | \"ontology\"\n        | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n        | \"individual\"\n        | \"property\"\n        | string;\n    parameter?: string\n    default_value?: string\n}\n\nconst NO_TITLE = \"No title available.\";\n\nasync function getTitle(olsApi: OlsApi, entityType: string, ontologyId?: string, iri?: string, parameter?: string, default_value?: string): Promise<any> {\n    if (entityType === \"ontology\") {\n        if(!ontologyId) {\n            throw Error(\"ontology id has to be provided\")\n        }\n        else {\n            const response = await olsApi.getOntology(undefined, undefined, {\n                ontologyId: ontologyId\n            }, parameter)\n            return {\n                title: response?.config.title || default_value || NO_TITLE\n            }\n        }\n    }\n    if (entityType === \"term\" || entityType === \"property\" || entityType === \"individual\") {\n        if(!iri) {\n            throw Error(\"iri has to be provided\")\n        }\n        else {\n            const response = await getPreferredOntologyJSON(olsApi, entityType, ontologyId, iri, parameter)\n            return {\n                title: response['label'] || default_value || NO_TITLE,\n                inDefiningOntology: response['is_defining_ontology'],\n                ontology: response['ontology_name']\n            }\n        }\n    }\n    //unacceptable object type\n    throw Error(\"Unexpected entity type. Should be one of 'ontology', 'term', 'class', 'individual', 'property'\");\n}\n\nfunction TitleWidget(props: TitleWidgetProps) {\n    const {iri, ontologyId, api, titleText, entityType, parameter, default_value} = props;\n    const fixedEntityType = entityType == \"class\" ? \"term\" : entityType\n    const olsApi = new OlsApi(api);\n\n    const {\n        data: response,\n        isLoading,\n        isSuccess,\n        isError,\n        error,\n    } = useQuery([api, \"getTitle\", fixedEntityType, ontologyId, iri, parameter], () => {\n        return getTitle(olsApi, fixedEntityType, ontologyId, iri, parameter, default_value);\n    });\n\n    // TODO: Should TitleWidget show the following info message if defining ontology is not available (placed inside isSuccess span)?\n    /*{\n        !props.ontologyId && !titleText && !response.inDefiningOntology && fixedEntityType !== \"ontology\" &&\n        <EuiFlexItem>\n            <EuiText>\n                <i>Defining ontology not available. Showing occurrence inside {response.ontology} instead.</i>\n            </EuiText>\n        </EuiFlexItem>\n    }*/\n\n    return (\n        <>\n            {isLoading && <EuiLoadingSpinner size=\"s\"/>}\n            {isSuccess &&\n                <>\n                    <EuiText>{titleText || response.title}</EuiText>\n                </>}\n            {isError && <EuiText>{getErrorMessageToDisplay(error, \"title\")}</EuiText>}\n        </>\n    );\n}\n\nexport {TitleWidget};\n","import React from \"react\";\nimport {EuiFlexGroup, EuiFlexItem, EuiLoadingSpinner, EuiText} from \"@elastic/eui\";\nimport { BreadcrumbWidget } from \"./BreadcrumbWidget\";\nimport { IriWidget } from \"./IriWidget\";\nimport { TitleWidget } from \"./TitleWidget\";\nimport { DescriptionWidget } from \"./DescriptionWidget\";\nimport { TabWidget } from \"./TabWidget\";\nimport {useQuery} from \"react-query\";\nimport {OlsApi} from \"../../../api/OlsApi\";\nimport {getPreferredOntologyJSON} from \"./index\";\n\nexport interface MetadataWidgetProps {\n  iri: string;\n  ontologyId?: string;\n  api: string;\n  entityType:\n    | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n    | \"individual\"\n    | \"property\"\n    | string;\n  parameter?: string\n}\n\nfunction MetadataWidget(props: MetadataWidgetProps) {\n    const { iri, api, ontologyId, entityType, parameter } = props;\n\n    const olsApi = new OlsApi(api);\n\n    const {\n        data: ontologyJSON,\n        isLoading: isLoadingOntologyId,\n        isSuccess: isSuccessOntologyId,\n        isError: isErrorOntologyId,\n        error: errorOntologyId\n    } = useQuery(\n        [\n            \"ontologyId\",\n            iri,\n            api,\n            entityType,\n            parameter,\n            props.ontologyId\n        ],\n        async () => {\n            return getPreferredOntologyJSON(olsApi, entityType, ontologyId, iri, parameter);\n        },\n        {\n\n        }\n    )\n\n  return (\n      <>\n          {isLoadingOntologyId && <EuiLoadingSpinner size=\"s\"></EuiLoadingSpinner>}\n          {(props.ontologyId || isSuccessOntologyId) &&\n              <EuiFlexGroup direction=\"column\" style={{ maxWidth: 600 }}>\n                  {\n                      !props.ontologyId && !ontologyJSON[\"is_defining_ontology\"] &&\n                      <EuiFlexItem>\n                          <EuiText>\n                              <i>Defining ontology not available. Showing occurrence inside {ontologyJSON[\"ontology_name\"]} instead.</i>\n                          </EuiText>\n                      </EuiFlexItem>\n                  }\n                  <EuiFlexItem grow={false}>\n                <span>\n                  <BreadcrumbWidget api={api} iri={iri} entityType={entityType} ontologyId={props.ontologyId ? props.ontologyId : ontologyJSON[\"ontology_name\"]} parameter={parameter}/>\n                </span>\n                  </EuiFlexItem>\n                  <EuiFlexItem>\n                      <EuiFlexGroup direction=\"column\">\n                          <EuiFlexItem>\n                              <EuiFlexGroup>\n                                  <EuiFlexItem grow={false}>\n                                      <IriWidget iri={iri} parameter={parameter}/>\n                                  </EuiFlexItem>\n                              </EuiFlexGroup>\n                          </EuiFlexItem>\n\n                          <EuiFlexItem grow={false}>\n                              <TitleWidget iri={iri} api={api} ontologyId={props.ontologyId ? props.ontologyId : ontologyJSON[\"ontology_name\"]} entityType={entityType} parameter={parameter} />\n                          </EuiFlexItem>\n                      </EuiFlexGroup>\n                  </EuiFlexItem>\n                  <EuiFlexItem>\n                      <DescriptionWidget iri={iri} api={api} ontologyId={props.ontologyId ? props.ontologyId : ontologyJSON[\"ontology_name\"]} entityType={entityType} parameter={parameter}/>\n                  </EuiFlexItem>\n                  <EuiFlexItem>\n                      <TabWidget\n                          iri={iri}\n                          ontologyId={props.ontologyId ? props.ontologyId : ontologyJSON[\"ontology_name\"]}\n                          api={api}\n                          parameter={parameter}\n                          entityType={entityType}/>\n                  </EuiFlexItem>\n              </EuiFlexGroup>\n          }\n      </>\n  );\n}\nexport { MetadataWidget };\n","import {OlsApi} from \"../../../api/OlsApi\";\n\n/**\n * returns JSON of specified ontology or, if not provided, of defining ontology or of first ontology if defining ontology is not found\n */\nexport async function getPreferredOntologyJSON(olsApi: OlsApi, entityType: string, ontologyId: string | undefined, iri: string, parameter: string | undefined) {\n    if(entityType === \"term\" || entityType === \"class\") {\n        const response = await olsApi.getTerm(undefined, undefined, {ontologyId: ontologyId, termIri: iri}, parameter)\n            .catch((error) => console.log(error));\n        const definingOntologyArr = response[\"_embedded\"][\"terms\"].filter((term: any) => {return term[\"is_defining_ontology\"]});\n        if(definingOntologyArr.length > 0) return definingOntologyArr[0];\n        else return response[\"_embedded\"][\"terms\"][0];\n    }\n    else if(entityType === \"property\") {\n        const response = await olsApi.getProperty(undefined, undefined, {ontologyId: ontologyId, propertyIri: iri}, parameter)\n            .catch((error) => console.log(error));\n        const definingOntologyArr = response[\"_embedded\"][\"properties\"].filter((term: any) => {return term[\"is_defining_ontology\"]});\n        if(definingOntologyArr.length > 0) return definingOntologyArr[0];\n        else return response[\"_embedded\"][\"properties\"][0];\n    }\n    else if(entityType === \"individual\") {\n        const response = await olsApi.getIndividual(undefined, undefined, {ontologyId: ontologyId, individualIri: iri}, parameter)\n            .catch((error) => console.log(error));\n        const definingOntologyArr = response[\"_embedded\"][\"individuals\"].filter((term: any) => {return term[\"is_defining_ontology\"]});\n        if(definingOntologyArr.length > 0) return definingOntologyArr[0];\n        else return response[\"_embedded\"][\"individuals\"][0];\n    }\n    else {\n        console.error(Error(\"Unexpected entity type. Should be one of: 'term', 'class', 'property', 'individual'\"));\n        return undefined;\n    }\n}\n\nexport * from \"./DescriptionWidget\";\nexport * from \"./IriWidget\";\nexport * from \"./BreadcrumbWidget\";\nexport * from \"./TabWidget\";\nexport { TitleWidget } from \"./TitleWidget\";\nexport { MetadataWidget } from \"./MetadataWidget\";\n","import React, { useEffect, useState } from \"react\";\n\nimport { OlsApi } from \"../../../api/OlsApi\";\nimport { EuiComboBoxProps } from \"@elastic/eui/src/components/combo_box/combo_box\";\nimport { EuiComboBoxOptionOption } from \"@elastic/eui/src/components/combo_box/types\";\nimport {\n    EuiComboBox,\n    euiPaletteColorBlindBehindText,\n    euiPaletteColorBlind,\n    EuiHighlight,\n    EuiHealth,\n} from \"@elastic/eui\";\nimport {useQuery} from \"react-query\";\nimport {BreadcrumbWidget} from \"../MetadataWidget\";\n\nexport interface AutocompleteWidgetProps extends EuiComboBoxProps<string> {\n    /**\n     * Instance of the OLS API to call.\n     */\n    api: string;\n    /**\n     * Additional parameter to pass to the API.\n     *\n     * This parameter could be used to filter the search results. Each parameter could be combined via\n     * the special character <i><b>&</b></i>. The values of a parameter key could be combined with a comma sign\n     * <i><b>,</b></i>. The following keys could be used:<br/> <br/>\n     *  <table>\n     *  <thead><tr><th>Parameter</th><th>Description</th></tr></thead>\n     *  <tr><td>ontology</td><td>Restrict a search to a set of ontologies e.g. ontology=uberon,mesh</td></tr>\n     *  <tr><td>type</td><td>Restrict a search to an entity type, one of {class,property,individual,ontology}</td></tr>\n     *  <tr><td>slim</td><td>Restrict a search to a particular set of slims by name</td></tr>\n     *  <tr><td>fieldList</td><td>Specify the fields to return, the defaults are {iri,label,short_form,obo_id,ontology_name,ontology_prefix,description,type}</td></tr>\n     *  <tr><td>obsoletes</td><td>Set to true to include obsoleted terms in the results</td></tr>\n     *  <tr><td>local</td><td>Set to true to only return terms that are in a defining ontology e.g. Only return matches to gene ontology terms in the gene ontology, and exclude ontologies where those terms are also referenced</td></tr>\n     *  <tr><td>childrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a relation only)</td></tr>\n     *  <tr><td>allChildrenOf</td><td>You can restrict a search to all children of a given term. Supply a list of IRI for the terms that you want to search under (subclassOf/is-a plus any hierarchical/transitive properties like 'part of' or 'develops from')</td></tr>\n     *  <tr><td>rows</td><td>How many results per page</td></tr>\n     *  <tr><td>start</td><td>The results page number</td></tr>\n     * </table>\n     */\n    parameter?: string;\n    /**\n     * A method that is called once the set of selection changes\n     * @param selectedOptions  The selected items\n     */\n    selectionChangedEvent: (selectedOption: {\n        label: string;\n        iri?: string;\n        ontology_name?: string;\n        type?: string;\n    }) => void;\n    /**\n     * Pass a pre select value.\n     */\n    selectOption?: { label?: string; iri?: string };\n    /**\n     * Placeholder to show if no user input nor selection is performed.\n     */\n    placeholder?: string;\n    /**\n     * If true, only the selected label of the entity is displayed. If false, the ontology and the entity short form is displayed behind the label. Default is true.\n     */\n    hasShortSelectedLabel?: boolean;\n    /**\n     * If true, custom terms can be added that are not found via API.\n     */\n    allowCustomTerms: boolean;\n}\n\n/**\n * A React component to provide Autosuggestion based on SemLookP.\n */\nfunction AutocompleteWidget(props: AutocompleteWidgetProps) {\n    const { api, parameter, hasShortSelectedLabel, ...rest } = props;\n\n    const olsApi = new OlsApi(api);\n\n    const visColors = euiPaletteColorBlind();\n    const visColorsBehindText = euiPaletteColorBlindBehindText();\n\n    /**\n     * The current search value\n     */\n    const [searchValue, setSearchValue] = useState<string>(\"\");\n\n    /**\n     * The set of available options.s\n     */\n    const [options, setOptions] = useState<Array<EuiComboBoxOptionOption<any>>>([]);\n    /**\n     * Store current set of select Options. A subset of options.\n     */\n    const [selectedOptions, setSelectedOptions] = useState<Array<EuiComboBoxOptionOption<any>>>([]);\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const renderOption = (option, searchValue) => {\n        const { label, value } = option;\n        if(props.allowCustomTerms && value.iri==\"\"){// if we have a custom term, just show the label\n             return  label;\n        } else { // otherwise can we can use the semantic information to show some context information like ontology name\n            let color = \"\";\n            if (value.type === \"class\") {\n                color = visColorsBehindText[5];\n            } else if (value.type === \"individual\") {\n                color = visColorsBehindText[3];\n            } else if (value.type === \"property\") {\n                color = visColorsBehindText[1];\n            }\n            const dotColor = visColors[visColorsBehindText.indexOf(color)];\n            if (value.type === \"ontology\") {\n                return (\n                    <EuiHealth title={value.type} color={dotColor}>\n                        <span>\n                            <EuiHighlight search={searchValue}>{value.label}</EuiHighlight>\n                        </span>\n                    </EuiHealth>\n                );\n            }\n            return (\n                <EuiHealth title={value.type} color={dotColor}>\n                <span>\n                  <EuiHighlight search={searchValue}>{value.label}</EuiHighlight>\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    <BreadcrumbWidget api={api} entityType={value.type} ontologyId={value.ontology_name} iri={value.iri} colorFirst={\"primary\"} colorSecond={\"success\"} parameter={value.parameter}></BreadcrumbWidget>\n                </span>\n                </EuiHealth>\n            );\n            }\n    };\n\n    /**\n     * on mount: fetches term for selectOption and sets it's label or sets a given label if no iri is provided or the given iri cannot be resolved only if allowCustomTerms is true\n     */\n    const {\n        isLoading: isLoadingOnMount\n    } = useQuery(\n        [\n            \"onMount\", // no dependencies - does only need to be executed once when mounting the component\n            props.selectOption\n        ],\n        async () => {\n            if (props.selectOption?.iri && props.selectOption?.iri.startsWith(\"http\")) {\n                olsApi.select(\n                    {query: props.selectOption?.iri},\n                    undefined,\n                    undefined,\n                    parameter,\n                ).then((response) => {\n                    if (response.response && response.response.docs) {\n                        response.response.docs.map((selection: any) => {\n                            if (props.selectOption?.iri === selection.iri) {\n                                setOptions([\n                                    {\n                                        // label to display within the combobox either raw value or generated one\n                                        // #renderOption() is used to display during selection.\n                                        label: hasShortSelectedLabel ? selection.label : generateDisplayLabel(selection),\n                                        value: {\n                                            iri: selection.iri,\n                                            label: selection.label,\n                                            ontology_name: selection.ontology_name,\n                                            type: selection.type,\n                                            short_form: selection.short_form,\n                                        },\n                                    },\n                                ]);\n                                setSelectedOptions([\n                                    {\n                                        // label to display within the combobox either raw value or generated one\n                                        // #renderOption() is used to display during selection.\n                                        label: hasShortSelectedLabel ? selection.label : generateDisplayLabel(selection),\n                                        value: {\n                                            iri: selection.iri,\n                                            label: selection.label,\n                                            ontology_name: selection.ontology_name,\n                                            type: selection.type,\n                                            short_form: selection.short_form,\n                                        },\n                                    },\n                                ]);\n                            }\n                        })\n                    }\n                });\n            } else if (props.selectOption?.label && props.allowCustomTerms) { // when a custom term is passed\n                setOptions([\n                    {\n                        label: props.selectOption?.label,\n                        value: {\n                            iri: \"\",\n                            label: \"\",\n                            ontology_name: \"\",\n                            type: \"\",\n                            short_form: \"\",\n                        }\n                    },\n                ]);\n                setSelectedOptions([\n                    {\n                        label: props.selectOption?.label,\n                        value: {\n                            iri: \"\",\n                            label: \"\",\n                            ontology_name: \"\",\n                            type: \"\",\n                            short_form: \"\",\n                        }\n                    },\n                ]);\n            }\n        }\n    )\n\n    /**\n     * fetches new options when searchValue changes\n     */\n    const {\n        isLoading: isLoadingTerms\n    } = useQuery(\n        [\n            \"onSearchChange\",\n            searchValue\n        ],\n        async () => {\n            if (searchValue.length > 0) {\n                return olsApi.select(\n                    {query: searchValue},\n                    undefined,\n                    undefined,\n                    parameter,\n                ).then((response) => {\n                    if (response.response && response.response.docs) {\n                        setOptions(response.response.docs.map((selection: any) => (\n                            {\n                                // label to display within the combobox either raw value or generated one\n                                // #renderOption() is used to display during selection.\n                                label: hasShortSelectedLabel ? selection.label : generateDisplayLabel(selection),\n                                // values to pass to clients\n                                value: {\n                                    iri: selection.iri,\n                                    label: selection.label,\n                                    ontology_name: selection.ontology_name,\n                                    type: selection.type,\n                                    short_form: selection.short_form,\n                                },\n                            })\n                        ));\n                        setSelectedOptions([]);\n                    }\n                });\n            }\n        }\n    )\n\n    /**\n     * Once the set of selected options changes, pass the event by invoking the passed function.\n     */\n    useEffect(() => {\n        if (selectedOptions.length >= 1)  {\n            props.selectionChangedEvent(\n                selectedOptions.map((x) => {\n                    // return the value object with the raw values from OLS to a client\n                    if(props.allowCustomTerms && x.value.iri==\"\") {\n                        return {\n                            iri: \"\",\n                            label: x.label,\n                            ontology_name: \"\",\n                            type: \"\"\n                        };\n                    } else {\n                        return {\n                            iri: x.value.iri,\n                            label: x.value.label,\n                            ontology_name: x.value.ontology_name,\n                            type: x.value.type\n                        };\n                    }\n                })[0]\n            );\n        }\n    }, [selectedOptions]);\n\n    function generateDisplayLabel(item: any) {\n    return (\n      item.label +\n      \" (\" +\n      item.ontology_name.toUpperCase() +\n      \" \" +\n      item.short_form +\n      \")\"\n    );\n  }\n\n    function onChangeHandler(options: Array<any>): void {\n        setSelectedOptions(options);\n    }\n\n    function onCreateOptionHandler(searchValue: string) {\n        const newOption = {\n          label: searchValue,\n          value: {\n            iri: \"\",\n            label: \"\",\n            ontology_name: \"\",\n            type: \"\",\n            short_form: \"\",\n          }\n    };\n\n    setOptions([...options, newOption]);\n    setSelectedOptions([...selectedOptions, newOption]);\n    }\n\n    if (props.allowCustomTerms) {\n        return (\n            <EuiComboBox\n                isClearable\n                aria-label=\"searchBar\"\n                fullWidth={true}\n                {...rest} // items above can be overriden by a client\n                async={true}\n                isLoading={isLoadingTerms || isLoadingOnMount}\n                singleSelection={{ asPlainText: true }}\n                placeholder={\n                    props.placeholder ? props.placeholder : \"Search for a Concept\"\n                }\n                options={options}\n                selectedOptions={selectedOptions}\n                onSearchChange={setSearchValue}\n                onChange={onChangeHandler}\n                renderOption={renderOption}\n                onCreateOption={onCreateOptionHandler}\n            />\n        );\n    } else {\n        return (\n            <EuiComboBox\n                isClearable\n                aria-label=\"searchBar\"\n                fullWidth={true}\n                {...rest} // items above can be overriden by a client\n                async={true}\n                isLoading={isLoadingTerms || isLoadingOnMount}\n                singleSelection={{ asPlainText: true }}\n                placeholder={\n                    props.placeholder ? props.placeholder : \"Search for a Concept\"\n                }\n                options={options}\n                selectedOptions={selectedOptions}\n                onSearchChange={setSearchValue}\n                onChange={onChangeHandler}\n                renderOption={renderOption}\n            />\n        );\n    }\n}\n\nexport { AutocompleteWidget };\n","import React from \"react\";\nimport {EuiButton} from \"@elastic/eui\";\n\nexport interface JsonApiWidgetProps {\n  apiQuery: string;\n  buttonText: string;\n  buttonSize?: \"s\" | \"m\";\n}\n\nfunction JsonApiWidget(props: JsonApiWidgetProps) {\n  const { apiQuery, buttonText, buttonSize } = props;\n\n  return (\n    <EuiButton href={apiQuery} target=\"_blank\" size={buttonSize || \"m\"}>{buttonText}</EuiButton>\n  );\n}\nexport { JsonApiWidget };\n","import React, {useState} from \"react\";\nimport { EuiText, EuiLoadingSpinner, EuiCard } from \"@elastic/eui\";\nimport { useQuery } from 'react-query';\nimport { apiCallFn, OlsApi } from \"../../../api/OlsApi\";\n\nexport interface DataContentWidgetProps {\n  api: string;\n  /**\n   * This parameter specifies which set of ontologies should be shown for a specific frontend like 'nfdi4health'\n   */\n  parameter?: string;\n}\n\nconst NOT_AVAILABLE = \"n/a\";\n\n\n\nasync function getTotalAmountOfTerms(apiCall: apiCallFn, parameter?: string): Promise<number> {\n  const response = await apiCall({ size: \"500\" },undefined, undefined, parameter);\n  if (response.page.totalElements != null && response._embedded && response._embedded.ontologies) {\n    let totalAmount = 0;\n    for (const ontology of response._embedded.ontologies) {\n      totalAmount += ontology.numberOfTerms;\n    }\n    return totalAmount;\n  } else {\n    throw new Error(\"Unexpected API response\");\n  }\n}\n\nasync function getTotalAmountOfProperties(apiCall: apiCallFn, parameter?: string): Promise<number> {\n  const response = await apiCall({ size: \"500\" },undefined,undefined, parameter);\n  if (response.page.totalElements != null && response._embedded && response._embedded.ontologies) {\n    let totalAmount = 0;\n    for (const ontology of response._embedded.ontologies) {\n      totalAmount += ontology.numberOfProperties;\n    }\n    return totalAmount;\n  } else {\n    throw new Error(\"Unexpected API response\");\n  }\n}\n\nasync function getTotalAmountOfIndividuals(apiCall: apiCallFn, parameter?: string): Promise<number> {\n  const response = await apiCall({ size: \"500\" },undefined,undefined, parameter);\n  if (response.page.totalElements != null && response._embedded && response._embedded.ontologies) {\n    let totalAmount = 0;\n    for (const ontology of response._embedded.ontologies) {\n      totalAmount += ontology.numberOfIndividuals;\n    }\n    return totalAmount;\n  } else {\n    throw new Error(\"Unexpected API response\");\n  }\n}\n\nfunction DataContentWidget(props: DataContentWidgetProps) {\n  const { api, parameter, ...rest } = props;\n  const olsApi = new OlsApi(api);\n\n  const [totalOntologies, setTotalOntologies] = useState(0);\n\n\n  const {\n    data: getOntologies,\n    isLoading: isLoadingOntologies,\n    isError: isErrorOntologies,\n    error: errorOntologies,\n    dataUpdatedAt: dataUpdatedAtOntologies\n  } = useQuery(\n      [\n        api,\n        \"ontologiesMetadata\",\n        parameter,\n      ],\n      async () => {\n        return olsApi\n            .getOntologies(\n                {\n                  size: \"500\",\n                },\n                undefined,\n                undefined,\n                props.parameter\n            )\n            .then((response) => {\n              if (\n                  response.page.totalElements != null &&\n                  response._embedded &&\n                  response._embedded.ontologies\n              ) {\n                // TODO Refactor (code duplication, possibly reuse getTotalElements from DataContentWidget?)\n                setTotalOntologies(response.page.totalElements);\n                return response._embedded.ontologies;\n              } else {\n                throw new Error(\"Unexpected API response\");\n              }\n            });\n      }\n  );\n\n  const {\n    data: totalTerms,\n    isLoading: isLoadingTerms,\n    isError: isErrorTerms,\n    error: errorTerms,\n  } = useQuery([api, \"getTerms\", parameter], () => { return getTotalAmountOfTerms(olsApi.getOntologies, props.parameter); });\n\n  const {\n    data: totalProperties,\n    isLoading: isLoadingProperties,\n    isError: isErrorProperties,\n    error: errorProperties,\n  } = useQuery([api, \"getProperties\", parameter], () => { return getTotalAmountOfProperties(olsApi.getOntologies, props.parameter); });\n\n  const {\n    data: totalIndividuals,\n    isLoading: isLoadingIndividuals,\n    isError: isErrorIndividuals,\n    error: errorIndividuals,\n  } = useQuery([api, \"getIndividuals\", parameter], () => { return getTotalAmountOfIndividuals(olsApi.getOntologies, props.parameter); });\n\n  return (\n    <>\n      <EuiCard\n        title=\"Data Content\"\n        description={dataUpdatedAtOntologies ? `Updated ${new Date(dataUpdatedAtOntologies).toLocaleString()}` : ''}\n        layout=\"horizontal\"\n      >\n        <EuiText {...rest}>\n          {(isErrorIndividuals || isErrorProperties || isErrorOntologies || isErrorTerms) ?\n            <EuiText>No data content available</EuiText> :\n            <ul>\n              <li>{isLoadingOntologies ? <EuiLoadingSpinner size=\"s\" /> : (totalOntologies ? totalOntologies.toLocaleString() : NOT_AVAILABLE)} ontologies and terminologies</li>\n              <li>{isLoadingTerms ? <EuiLoadingSpinner size=\"s\" /> : (totalTerms ? totalTerms.toLocaleString() : NOT_AVAILABLE)} terms</li>\n              <li>{isLoadingProperties ? <EuiLoadingSpinner size=\"s\" /> : (totalProperties ? totalProperties.toLocaleString() : NOT_AVAILABLE)} properties</li>\n              <li>{isLoadingIndividuals ? <EuiLoadingSpinner size=\"s\" /> : (totalIndividuals ? totalIndividuals.toLocaleString() : NOT_AVAILABLE)} individuals</li>\n              {/* <li>Version {NOT_AVAILABLE}</li> */} {/* TODO how to get API version? */}\n            </ul>\n          }\n        </EuiText>\n      </EuiCard>\n    </>\n  );\n}\n\nexport { DataContentWidget };\n","import React, { useState } from \"react\";\nimport {\n  EuiBasicTable,\n  EuiButtonIcon,\n  EuiLink,\n  CriteriaWithPagination,\n  EuiText,\n} from \"@elastic/eui\";\nimport { useQuery } from \"react-query\";\nimport { OlsApi } from \"../../../api/OlsApi\";\nimport { css, SerializedStyles } from \"@emotion/react\";\nimport { Action } from \"@elastic/eui/src/components/basic_table/action_types\";\nimport { EuiBasicTableColumn } from \"@elastic/eui/src/components/basic_table/basic_table\";\nimport {getErrorMessageToDisplay} from \"../index\";\n\nexport interface ResourcesWidgetProps {\n  api: string;\n  initialEntriesPerPage?: number;\n  pageSizeOptions?: number[];\n  initialSortField?: string;\n  initialSortDir?: \"asc\" | \"desc\";\n  /**\n   * Pass actions to each item in the table.\n   */\n  targetLink?: string;\n  actions?: Array<Action<OlsResource>>;\n  /**\n   * This parameter specifies which set of ontologies should be shown for a specific frontend like 'nfdi4health'\n   */\n  parameter?: string;\n}\n\nexport interface OlsResource {\n  ontologyId: string;\n  loaded: string;\n  numberOfTerms: number;\n  numberOfProperties: number;\n  numberOfIndividuals: number;\n  config: {\n    title: string;\n    description: string;\n    preferredPrefix: string;\n    allowDownload: boolean;\n    fileLocation: string;\n    version?: string;\n    [otherFields: string]: unknown;\n  };\n  [otherFields: string]: unknown;\n}\n\nconst DEFAULT_INITIAL_ENTRIES_PER_PAGE = 10;\nconst DEFAULT_PAGE_SIZE_OPTIONS = [10, 25, 50, 100];\nconst DEFAULT_INITIAL_SORT_FIELD = \"config.preferredPrefix\";\nconst DEFAULT_INITIAL_SORT_DIR = \"asc\" as const;\n\nfunction ResourcesWidget(props: ResourcesWidgetProps) {\n  const {\n    api,\n    initialEntriesPerPage = DEFAULT_INITIAL_ENTRIES_PER_PAGE,\n    pageSizeOptions = DEFAULT_PAGE_SIZE_OPTIONS,\n    initialSortField = DEFAULT_INITIAL_SORT_FIELD,\n    initialSortDir = DEFAULT_INITIAL_SORT_DIR,\n    targetLink,\n    parameter,\n  } = props;\n  const olsApi = new OlsApi(api);\n\n  const [pageIndex, setPageIndex] = useState(0);\n  const [entriesPerPage, setEntriesPerPage] = useState(initialEntriesPerPage);\n  const [sortField, setSortField] = useState<string | number>(initialSortField);\n  const [sortDirection, setSortDirection] = useState(initialSortDir);\n  const [totalOntologies, setTotalOntologies] = useState(0);\n\n\n  const columns: Array<EuiBasicTableColumn<OlsResource> & {css?:SerializedStyles}> = [\n    {\n      name: \"Resource Name\",\n      field: \"config.title\",\n      width: \"15%\",\n      sortable: true,\n    },\n    {\n      name: \"Short Name\",\n      field: \"config.preferredPrefix\",\n      render: (value: string) => (\n          targetLink ? <EuiLink href={targetLink + \"ontologies/\" + value.toLowerCase() + \"/\"}>{value}</EuiLink> : value\n      ),\n      width: \"10%\",\n      sortable: true,\n    },\n    {\n      name: \"Description\",\n      field: \"config.description\",\n      width: \"30%\",\n      css: css`\n        display: block;\n        max-height: 200px;\n        overflow: auto;\n      `,\n    },\n    {\n      name: \"Version\",\n      field: \"config.version\",\n      width: \"7.5%\",\n    },\n    {\n      name: \"Loaded on\",\n      field: \"loaded\",\n      width: \"10%\",\n      dataType: \"date\" as const,\n      sortable: true,\n    },\n    {\n      name: \"Terms\",\n      field: \"numberOfTerms\",\n      render: (value: number) => <>{value.toLocaleString()}</>,\n      width: \"7.5%\",\n      sortable: true,\n    },\n    {\n      name: \"Properties\",\n      field: \"numberOfProperties\",\n      render: (value: number) => <>{value.toLocaleString()}</>,\n      width: \"7.5%\",\n      sortable: true,\n    },\n    {\n      name: \"Individuals\",\n      field: \"numberOfIndividuals\",\n      render: (value: number) => <>{value.toLocaleString()}</>,\n      width: \"7.5%\",\n      sortable: true,\n    },\n    {\n      width: \"5%\",\n      actions: [\n        ...(props.actions || []),\n        {\n          render: (item: OlsResource) => (\n            <EuiButtonIcon\n              href={item.config.fileLocation}\n              iconType=\"download\"\n              aria-label=\"Download\"\n              isDisabled={\n                !item.config.allowDownload ||\n                item.config.fileLocation.startsWith(\"file://\")\n              }\n            />\n          ),\n        },\n      ],\n    },\n  ];\n\n  const pagination = {\n    pageIndex: pageIndex,\n    pageSize: entriesPerPage,\n    totalItemCount: totalOntologies,\n    pageSizeOptions: pageSizeOptions,\n  };\n\n  const sorting = {\n    sort: {\n      field: sortField,\n      direction: sortDirection,\n    },\n  };\n\n  const onTableChange = ({\n    page,\n    sort,\n  }: CriteriaWithPagination<OlsResource>) => {\n    const { index: pageIndex, size: entriesPerPage } = page;\n    setPageIndex(pageIndex);\n    setEntriesPerPage(entriesPerPage);\n\n    if (sort) {\n      const { field: sortField, direction: sortDirection } = sort;\n      setSortField(sortField);\n      setSortDirection(sortDirection);\n    }\n  };\n\n  const {\n    data: ontologies,\n    isSuccess,\n    isLoading,\n    isError,\n    error,\n  } = useQuery(\n    [\n      api,\n      \"ontologiesMetadata\",\n      entriesPerPage,\n      pageIndex,\n      sortField,\n      sortDirection,\n      parameter,\n    ],\n    async () => {\n      return olsApi\n        .getOntologies(\n          {\n            size: entriesPerPage.toString(),\n            page: pageIndex.toString(),\n          },\n          {\n            sortField: sortField,\n            sortDir: sortDirection,\n          },\n          undefined,\n            props.parameter\n        )\n        .then((response) => {\n          if (\n            response.page.totalElements != null &&\n            response._embedded &&\n            response._embedded.ontologies\n          ) {\n            // TODO Refactor (code duplication, possibly reuse getTotalElements from DataContentWidget?)\n            setTotalOntologies(response.page.totalElements);\n            return response._embedded.ontologies;\n          } else {\n            throw new Error(\"Unexpected API response\");\n          }\n        });\n    }\n  );\n\n  return (\n      <>\n        {isSuccess &&\n            <EuiBasicTable\n                columns={columns}\n                items={ontologies}\n                onChange={onTableChange}\n                pagination={pagination}\n                sorting={sorting}\n            />\n        }\n        {isLoading &&\n            <EuiBasicTable\n                columns={columns}\n                items={[]}\n                onChange={onTableChange}\n                pagination={pagination}\n                sorting={sorting}\n                loading\n            />\n\n        }\n        {isError &&\n            <EuiBasicTable\n                columns={columns}\n                items={[]}\n                onChange={onTableChange}\n                pagination={pagination}\n                sorting={sorting}\n                error={getErrorMessageToDisplay(error, \"resources\")}\n            />\n        }\n      </>\n  )\n}\n\nexport { ResourcesWidget };\n","import React from \"react\";\nimport {EuiFlexGroup, EuiFlexItem, EuiLoadingSpinner} from \"@elastic/eui\";\nimport {useQuery} from \"react-query\";\nimport { apiCallFn, OlsApi } from \"../../../api/OlsApi\";\n\nexport interface OntologyInfoWidgetProps {\n  ontologyId: string;\n  api: string;\n  parameter?: string;\n}\n\ninterface OntologyInfo {\n  iri: string,\n  id: string,\n  version: string,\n  termNum: number,\n  lastLoad: string,\n  annotations: object; //list of key&value string pairs\n}\n\nasync function getOntoData(apiCall: apiCallFn, ontologyId: string, parameter?: string): Promise<OntologyInfo> {\n  const response = await apiCall(undefined, undefined, {ontologyId: ontologyId}, parameter);\n\n  return {\n    iri: response.config.id,\n    id: response.ontologyId,\n    version: response.config.version,\n    termNum: response.numberOfTerms,\n    lastLoad: response.loaded,\n    annotations: response.config.annotations ? response.config.annotations : [],\n  };\n}\n\nfunction OntologyInfoWidget(props: OntologyInfoWidgetProps) {\n  const { ontologyId, api, parameter } = props;\n  const olsApi = new OlsApi(api);\n\n  const infoItemStyle = {\n    marginLeft: \"9px\"\n  };\n\n  const isAvailable = (item: any) => {\n    return item != undefined && item != \"\" && item != []\n  }\n\n  const {\n    data: ontologyInfo,\n    isLoading,\n    isError,\n    error,\n  } = useQuery([api, \"getOntology\", ontologyId, parameter], () => { return getOntoData(olsApi.getOntology, ontologyId, parameter); });\n\n  return (\n    <EuiFlexGroup direction=\"column\" style={{ maxWidth: 600 }}>\n      <EuiFlexItem>\n        <EuiFlexGroup direction=\"column\">\n          <EuiFlexItem grow={false}>\n            <b>Ontology IRI:</b>\n            <p style={infoItemStyle}>{isLoading ? <EuiLoadingSpinner size=\"s\" /> : (!isError && ontologyInfo && isAvailable(ontologyInfo.iri) ? ontologyInfo.iri.toLocaleString() : \"-\")}</p>\n          </EuiFlexItem>\n          <EuiFlexItem grow={false}>\n            <b>Ontology ID:</b>\n            <p style={infoItemStyle}>{isLoading ? <EuiLoadingSpinner size=\"s\" /> : (!isError && ontologyInfo && isAvailable(ontologyInfo.id) ? ontologyInfo.id.toLocaleString() : \"-\")}</p>\n          </EuiFlexItem>\n          <EuiFlexItem grow={false}>\n            <b>Version:</b>\n            <p style={infoItemStyle}>{isLoading ? <EuiLoadingSpinner size=\"s\" /> : (!isError && ontologyInfo && isAvailable(ontologyInfo.version) ? ontologyInfo.version.toLocaleString() : \"-\")}</p>\n          </EuiFlexItem>\n          <EuiFlexItem grow={false}>\n            <b>Number of terms:</b>\n            <p style={infoItemStyle}>{isLoading ? <EuiLoadingSpinner size=\"s\" /> : (!isError && ontologyInfo && isAvailable(ontologyInfo.termNum) ? ontologyInfo.termNum.toLocaleString() : \"-\")}</p>\n          </EuiFlexItem>\n          <EuiFlexItem grow={false}>\n            <b>Last loaded:</b>\n            <p style={infoItemStyle}>{isLoading ? <EuiLoadingSpinner size=\"s\" /> : (!isError && ontologyInfo && isAvailable(ontologyInfo.lastLoad) ? new Date(ontologyInfo.lastLoad).toLocaleString() : \"-\")}</p>\n          </EuiFlexItem>\n          {ontologyInfo ? (\n              Object.entries(ontologyInfo.annotations).map(([annoKey,annoVal]) => (/*TODO clickable annoKey*/\n                  <EuiFlexItem grow={false} key={annoKey}>\n                    <b>{annoKey}:</b>\n                    <p style={infoItemStyle}>{isAvailable(annoVal) ? annoVal.toLocaleString() : \"-\"}</p>\n                  </EuiFlexItem>\n              ))\n          ) : ''}\n        </EuiFlexGroup>\n      </EuiFlexItem>\n    </EuiFlexGroup>\n  );\n}\nexport { OntologyInfoWidget };\n","import { EuiSuggest, EuiSuggestionProps } from \"@elastic/eui\";\nimport { EuiSuggestProps } from \"@elastic/eui/src/components\";\nimport React, { useEffect, useState } from \"react\";\nimport { OlsApi } from \"../../../api/OlsApi\";\nimport {useQuery} from \"react-query\";\n\nexport type SearchBarWidgetProps = {\n  api: string;\n  query: string;\n  /**\n   * This parameter specifies which set of ontologies should be shown for a specific frontend like 'nfdi4health'\n   */\n  onSearchValueChange: (suggestion: string) => void;\n  parameter?: string\n} & Omit<EuiSuggestProps, \"suggestions\" | \"onChange\" | \"onItemClick\" | \"value\">;\n\nfunction SearchBarWidget(props: SearchBarWidgetProps) {\n  const {\n    api,\n    query,\n    onSearchValueChange,\n    ...rest\n  } = props;\n  const olsApi = new OlsApi(api);\n\n  const [searchValue, setSearchValue] = useState(query);\n  const [suggestions, setSuggestions] = useState<Array<EuiSuggestionProps>>([]);\n\n  useEffect(() => {\n    setSearchValue(query);\n  }, [query]);\n\n  useEffect(() => {\n    onSearchValueChange(searchValue);\n  }, [searchValue]);\n\n  /**\n   * fetches suggestions when searchValue changes (setSearchValue is passed as EuiSuggest onChange)\n   */\n  useQuery(\n      [\n          \"onChange\",\n          searchValue\n      ],\n      async () => {\n          return olsApi.suggest(\n              {\n                query: searchValue,\n              },\n              undefined,\n              undefined,\n              props.parameter,\n          ).then((response) => {\n            if (response.response && response.response.docs) {\n              setSuggestions(response.response.docs.map((suggestion: any) => (\n                  {\n                    label: suggestion.autosuggest,\n                    type: { color: \"tint1\", iconType: \"\"},\n                  }\n              )));\n            }\n          });\n      }\n  )\n\n  function onItemClick(item: EuiSuggestionProps) {\n    setSearchValue(item.label);\n  }\n\n  return (\n    <>\n      <EuiSuggest\n        aria-label=\"Search for Concept\"\n        placeholder=\"Search for Concept\"\n        isClearable\n        {...rest}\n        suggestions={suggestions}\n        onChange={setSearchValue}\n        onItemClick={onItemClick}\n        value={searchValue}\n      />\n    </>\n  );\n}\n\nexport { SearchBarWidget };\n","export function switchEntityType(entityType: string) {\n    switch (entityType) {\n        case 'class':\n            return 'terms';\n        case 'property':\n            return 'properties';\n        case 'individual':\n            return 'individuals';\n        default:\n            return 'terms'\n    }\n}\n","import { EuiCard, EuiCardProps, EuiFlexGroup, EuiFlexItem, EuiSpacer, EuiTitle } from \"@elastic/eui\";\nimport React from \"react\";\nimport { BreadcrumbWidget, DescriptionWidget, IriWidget } from \"../MetadataWidget\";\nimport { switchEntityType } from '../../../utils/ApiUtils'\n\n\nexport type MetadataCompactProps = {\n    api: string;\n    result: any;\n    targetLink?: string;\n    parameter?: string\n} & Partial<Omit<EuiCardProps, \"layout\">>;\n\n\nfunction MetadataCompact(props: MetadataCompactProps) {\n    const {\n        api,\n        result,\n        targetLink,\n        ...rest\n    } = props;\n\n    return (\n        <EuiCard\n            textAlign=\"left\"\n            {...rest}\n            href={targetLink ?\n                (result.type != \"ontology\" ?\n                    targetLink + \"ontologies/\" + result.ontology_name + \"/\" + switchEntityType(result.type) + \"?iri=\" + result.iri\n                    : targetLink + \"ontologies/\" + result.ontology_name)\n                : undefined}\n            title={\n                <EuiFlexGroup>\n                    <EuiFlexItem grow={false}>\n                        <EuiTitle><h2>{result.label}</h2></EuiTitle>\n                    </EuiFlexItem>\n                    <EuiFlexItem>\n                        {result.type != \"ontology\" && <BreadcrumbWidget api={api} iri={result.iri} entityType={result.type} ontologyId={result.ontology_name}/>}\n                    </EuiFlexItem>\n                </EuiFlexGroup>\n            }\n            children={\n                <>\n                    {result.type != \"ontology\" ? <IriWidget iri={result.iri}/> : undefined}\n                    <EuiSpacer size=\"s\"/>\n                    <DescriptionWidget api={api} ontologyId={result.ontology_name} iri={result.iri}\n                                       entityType={result.type}/>\n                </>\n            }\n        />\n\n    );\n}\n\nexport { MetadataCompact };\n","import {\n    EuiButtonEmpty,\n    EuiCardProps,\n    EuiFlexGroup,\n    EuiFlexItem,\n    EuiFormRow,\n    EuiHorizontalRule,\n    EuiLoadingSpinner,\n    EuiPanel,\n    EuiSelectable,\n    EuiSelectableOption,\n    EuiSpacer,\n    EuiSwitch,\n    EuiTablePagination,\n    EuiText,\n} from \"@elastic/eui\";\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery } from 'react-query';\nimport { OlsApi } from \"../../../api/OlsApi\";\nimport { SearchBarWidget } from \"../SearchBarWidget\";\nimport { MetadataCompact } from './MetadataCompact'\n\n\nexport type SearchResultsListWidgetProps = {\n  api: string;\n  query: string;\n  /**\n   * This parameter specifies which set of ontologies should be shown for a specific frontend like 'nfdi4health'\n   */\n  parameter?: string;\n  initialItemsPerPage?: number;\n  itemsPerPageOptions?: number[];\n  targetLink?: string;\n} & Partial<Omit<EuiCardProps, \"layout\">>;\n\nconst DEFAULT_INITIAL_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_SIZE_OPTIONS = [10, 25, 50, 100];\n\nfunction SearchResultsListWidget(props: SearchResultsListWidgetProps) {\n    const {\n        api,\n        query,\n        parameter,\n        initialItemsPerPage = DEFAULT_INITIAL_ITEMS_PER_PAGE,\n        itemsPerPageOptions = DEFAULT_PAGE_SIZE_OPTIONS,\n        targetLink,\n        ...rest\n    } = props;\n    const olsApi = new OlsApi(api);\n\n    const [searchValue, setSearchValue] = useState(query);\n    const [activePage, setActivePage] = useState(0);\n    const [pageCount, setPageCount] = useState(0);\n    const [itemsPerPage, setItemsPerPage] = useState(initialItemsPerPage);\n    const [totalItems, setTotalItems] = useState(0);\n    const [exactMatch, setExactMatch] = useState(false);\n    const [showObsoleteTerms, setShowObsoleteTerms] = useState(false);\n    const [filterByTypeOptions, setFilterByTypeOptions] = useState<EuiSelectableOption[]>([]);\n    const [filterByOntologyOptions, setFilterByOntologyOptions] = useState<EuiSelectableOption[]>([]);\n\n    useEffect(() => {\n        setSearchValue(query);\n    }, [query]);\n\n    function updateFilterOptions(currentOptions: EuiSelectableOption[], optionCounts: any[], setOptions: Function, render?: (value: string) => string) {\n        if (currentOptions.length == 0) {\n            setOptions(optionCounts.reduce((accumulator: any[], currentValue: string, currentIndex: number, array: any[]) => {\n                if (currentIndex % 2 === 0) {\n                    accumulator.push({\n                        label: render ? render(currentValue) : currentValue,\n                        key: currentValue,\n                        append: \"(\" + array[currentIndex + 1] + \")\",\n                        disabled: array[currentIndex + 1] == 0,\n                        data: { totalCount: array[currentIndex + 1] },\n                    });\n                }\n                return accumulator;\n            }, []));\n        } else {\n            const newOptions: EuiSelectableOption[] = [];\n            for(let i = 0; i < currentOptions.length; i++) {\n                newOptions.push(Object.assign({}, currentOptions[i])); // using Object.assign to pass by value, not by reference\n            }\n\n            optionCounts.forEach((currentValue: string, currentIndex: number, array: any[]) => {\n                if (currentIndex % 2 === 0) {\n                    const option = newOptions.find((option: EuiSelectableOption) => option.key == currentValue);\n                    if (option) {\n                        option.append = \"(\" + array[currentIndex + 1];\n                        if (option.data && array[currentIndex + 1] < option.data.totalCount) {\n                            option.append += \"/\" + option.data.totalCount;\n                        }\n                        option.append += \")\";\n                    }\n                }\n            });\n            setOptions(newOptions);\n        }\n    }\n\n    const filterSelectedOptions = (option: EuiSelectableOption) => option.checked === \"on\";\n\n    const {\n        data: searchResults,\n        isLoading,\n        isSuccess,\n        isError,\n        error,\n    } = useQuery(\n        [\n            \"searchResults\",\n            api,\n            searchValue,\n            exactMatch,\n            showObsoleteTerms,\n            activePage,\n            itemsPerPage,\n            filterByTypeOptions.filter(filterSelectedOptions).map((option: EuiSelectableOption) => option.key),\n            filterByOntologyOptions.filter(filterSelectedOptions).map((option: EuiSelectableOption) => option.key),\n            parameter\n        ],\n        async ({signal}) => {\n            return olsApi.search(\n                {\n                    query: searchValue,\n                    exactMatch: exactMatch,\n                    showObsoleteTerms: showObsoleteTerms,\n                    types: filterByTypeOptions.filter(filterSelectedOptions).map((option: EuiSelectableOption) => option.key).join(\",\"),\n                    ontology: filterByOntologyOptions.filter(filterSelectedOptions).map((option: EuiSelectableOption) => option.key).join(\",\"),\n                    groupByIri: true,\n                },\n                {\n                    page: activePage.toString(),\n                    size: itemsPerPage.toString(),\n                },\n                undefined,\n                props.parameter,\n                signal\n            ).then((response) => {\n                if (response.response && response.response.docs != null && response.response.numFound != null) {\n                    if (response.facet_counts && response.facet_counts.facet_fields) {\n                        if (response.facet_counts.facet_fields.type) {\n                            updateFilterOptions(\n                                filterByTypeOptions,\n                                response.facet_counts.facet_fields.type,\n                                setFilterByTypeOptions,\n                                (currentValue: string) => `${currentValue[0].toUpperCase()}${currentValue.slice(1)}`\n                            );\n                        }\n                        if (response.facet_counts.facet_fields.ontology_name) {\n                            updateFilterOptions(\n                                filterByOntologyOptions,\n                                response.facet_counts.facet_fields.ontology_name,\n                                setFilterByOntologyOptions,\n                                (currentValue: string) => currentValue.toUpperCase()\n                            );\n                        }\n                    }\n\n                    setTotalItems(response.response.numFound);\n                    const newPageCount = Math.ceil(response.response.numFound / itemsPerPage)\n                    setPageCount(newPageCount);\n                    if(activePage >= newPageCount) {\n                        setActivePage(0);\n                    }\n\n                    return response.response.docs;\n                } else {\n                    throw new Error(\"Unexpected API response\");\n                }\n            });\n        },\n        {\n            keepPreviousData: true\n        } // See: https://react-query-v3.tanstack.com/guides/paginated-queries\n    );\n\n    function onChangeItemsPerPage(newItemsPerPage: number) {\n        setActivePage(Math.floor((activePage * itemsPerPage + 1) / newItemsPerPage));\n        setItemsPerPage(newItemsPerPage);\n    }\n\n    function toggleExactMatch() {\n        setExactMatch(!exactMatch);\n    }\n\n    function toggleShowObsoleteTerms() {\n        setShowObsoleteTerms(!showObsoleteTerms);\n    }\n\n    function clearFilter(currentOptions: EuiSelectableOption[], setOptions: Function) {\n        const newOptions = [...currentOptions];\n        setOptions(newOptions.map((option: EuiSelectableOption) => ({ ...option, checked: undefined })));\n    }\n\n    function clearAllFilters() {\n        clearFilter(filterByTypeOptions, setFilterByTypeOptions);\n        clearFilter(filterByOntologyOptions, setFilterByOntologyOptions);\n    }\n\n    return (\n        <>\n            <SearchBarWidget\n                api={api}\n                query={searchValue}\n                onSearchValueChange={setSearchValue}\n                parameter={parameter}\n            />\n\n            <EuiSpacer size=\"s\"/>\n\n            <EuiFlexGroup>\n                <EuiFlexItem grow={3} style={{ minWidth: 250 }}>\n                    <EuiPanel>\n                        {isSuccess &&\n                            <EuiFormRow label=\"Filter by type\">\n                                <EuiSelectable\n                                    options={filterByTypeOptions}\n                                    onChange={setFilterByTypeOptions}\n                                    listProps={{ bordered: true }}\n                                >\n                                    {(list) => list}\n                                </EuiSelectable>\n                            </EuiFormRow>\n                        }\n                        {isLoading &&\n                            <EuiFormRow label=\"Filter by type\">\n                                <EuiLoadingSpinner size=\"s\" />\n                            </EuiFormRow>\n                        }\n                        {isError &&\n                            <EuiFormRow label=\"Filter by type\">\n                                <EuiSelectable\n                                    options={[]}\n                                    onChange={setFilterByTypeOptions}\n                                    listProps={{ bordered: true }}\n                                >\n                                    {(list) => list}\n                                </EuiSelectable>\n                            </EuiFormRow>\n                        }\n\n                        {isSuccess &&\n                            <EuiFormRow label=\"Filter by ontology\">\n                                <EuiSelectable\n                                    options={filterByOntologyOptions}\n                                    onChange={setFilterByOntologyOptions}\n                                    listProps={{ bordered: true }}\n                                    searchable\n                                >\n                                    {(list, search) => (\n                                        <>\n                                            {search}\n                                            {list}\n                                        </>\n                                    )}\n                                </EuiSelectable>\n                            </EuiFormRow>\n                        }\n                        {isLoading &&\n                            <EuiFormRow label=\"Filter by ontology\">\n                                <EuiLoadingSpinner size=\"s\" />\n                            </EuiFormRow>\n                        }\n                        {isError &&\n                            <EuiFormRow label=\"Filter by ontology\">\n                                <EuiSelectable\n                                    options={[]}\n                                    onChange={setFilterByOntologyOptions}\n                                    listProps={{ bordered: true }}\n                                    searchable\n                                >\n                                    {(list, search) => (\n                                        <>\n                                            {search}\n                                            {list}\n                                        </>\n                                    )}\n                                </EuiSelectable>\n                            </EuiFormRow>\n                        }\n\n                        <EuiButtonEmpty\n                            onClick={clearAllFilters}\n                        >\n                            Clear all filters\n                        </EuiButtonEmpty>\n                    </EuiPanel>\n                </EuiFlexItem>\n\n                <EuiFlexItem grow={7}>\n                    <EuiPanel color=\"transparent\" grow={false}>\n                        <EuiFlexGroup>\n                            <EuiFlexItem grow={false}>\n                                <EuiSwitch label=\"Exact match\" checked={exactMatch} onChange={toggleExactMatch}/>\n                            </EuiFlexItem>\n                            <EuiFlexItem>\n                                <EuiSwitch label=\"Show only obsolete terms\" checked={showObsoleteTerms}\n                                           onChange={toggleShowObsoleteTerms}/>\n                            </EuiFlexItem>\n                        </EuiFlexGroup>\n\n                        <EuiSpacer size=\"m\"/>\n\n                        <EuiText size=\"xs\" style={{ padding: \"0 8px\" }}>\n                            Showing {Math.min(activePage * itemsPerPage + 1, totalItems)} to {Math.min((activePage + 1) * itemsPerPage, totalItems)} of {totalItems} results\n                        </EuiText>\n\n                        <EuiSpacer size=\"s\"/>\n\n                        <EuiHorizontalRule margin=\"none\" style={{ height: 2 }}/>\n\n                        <EuiSpacer size=\"s\"/>\n\n                        <EuiTablePagination\n                            aria-label=\"Search result pagination\"\n                            pageCount={pageCount}\n                            activePage={activePage}\n                            onChangePage={setActivePage}\n                            itemsPerPage={itemsPerPage}\n                            onChangeItemsPerPage={onChangeItemsPerPage}\n                            itemsPerPageOptions={itemsPerPageOptions}\n                        />\n\n                        <EuiSpacer size=\"s\"/>\n\n                        {searchResults && searchResults.map((result: any) => (\n                            <React.Fragment key={result.id}>\n                                <MetadataCompact api={api} result={result} targetLink={targetLink}/>\n                                <EuiSpacer/>\n                            </React.Fragment>\n                        ))}\n                    </EuiPanel>\n                </EuiFlexItem>\n            </EuiFlexGroup>\n        </>\n    );\n}\n\nexport { SearchResultsListWidget };\n","import React from \"react\";\nimport { EuiCard, EuiFlexItem, EuiLoadingSpinner, EuiSpacer, EuiText } from \"@elastic/eui\";\nimport { OlsApi } from \"../../../api/OlsApi\";\nimport { useQuery } from 'react-query'\nimport {getErrorMessageToDisplay} from \"../index\";\n\nexport interface EntityInfoWidgetProps {\n    api: string;\n    iri?: string;\n    ontologyId?: string;\n    hasTitle?: boolean;\n    entityType:\n      | \"ontology\"\n      | \"term\" | \"class\" //equivalent: API uses 'class', rest uses 'term' -> both allowed here\n      | \"individual\"\n      | \"property\";\n    parameter?: string;\n}\n\ninterface EntityInfo {\n    //ontology:\n    iri?: string,\n    versionIri?: string,\n    id?: string,\n    version?: string,\n    termNum?: number,\n    lastLoad?: string,\n    creators?: [],\n    //term:\n    subsets?: [],\n    //term, property, individual:\n    label?: string,\n    synonyms?: [],\n    //all:\n    annotations: {},\n    entityTypeName: string\n}\n\nconst DEFAULT_HAS_TITLE = true;\n\nasync function getEntityInfo(olsApi: OlsApi, entityType: string, iri?: string, ontologyId?: string, parameter?: string): Promise<EntityInfo> {\n    if (entityType == \"ontology\") {\n        const response = await olsApi.getOntology(undefined, undefined, {ontologyId: ontologyId}, parameter)\n        return {\n            iri: response.config.id,\n            versionIri: response.config.versionIri,\n            id: response.ontologyId,\n            version: response.config.version,\n            termNum: response.numberOfTerms,\n            lastLoad: response.loaded,\n            creators: response.creators,\n            annotations: response.config.annotations ? response.config.annotations : [],\n            entityTypeName: 'Ontology'\n        };\n    }\n    if (entityType == \"term\" || entityType == \"class\") {\n        const response = await olsApi.getTerm(undefined, undefined, {ontologyId: ontologyId, termIri: iri}, parameter)\n        return {\n            label: response._embedded.terms[0].label,\n            synonyms: response._embedded.terms[0].synonyms,\n            subsets: response._embedded.terms[0].in_subset,\n            annotations: response._embedded.terms[0].annotation,\n            entityTypeName: 'Term'\n        };\n    }\n    if (entityType == \"property\") {\n        const response = await olsApi.getProperty(undefined, undefined, {ontologyId: ontologyId, propertyIri: iri}, parameter)\n        return {\n            label: response._embedded.properties[0].label,\n            synonyms: response._embedded.properties[0].synonyms,\n            annotations: response._embedded.properties[0].annotation,\n            entityTypeName: 'Property'\n        };\n    }\n    if (entityType == \"individual\") {\n        const response = await olsApi.getIndividual(undefined, undefined, {ontologyId: ontologyId, individualIri: iri}, parameter)\n        return {\n            label: response._embedded.individuals[0].label,\n            synonyms: response._embedded.individuals[0].synonyms,\n            annotations: response._embedded.individuals[0].annotation,\n            entityTypeName: 'Individual'\n        };\n    }\n    return {\n        label: 'INVALID ENTITY TYPE',\n        synonyms: [],\n        annotations: {},\n        entityTypeName: 'No'\n    };\n}\n\nfunction EntityInfoWidget(props: EntityInfoWidgetProps) {\n    const { api, iri, ontologyId, hasTitle = DEFAULT_HAS_TITLE, entityType, parameter, ...rest } = props;\n    const olsApi = new OlsApi(api);\n\n    const {\n        data: entityInfo,\n        isLoading: isLoadingEntityInfo,\n        isSuccess: isSuccessEntityInfo,\n        isError: isErrorEntityInfo,\n        error: errorEntityInfo,\n    } = useQuery([api, iri, ontologyId, entityType, parameter, \"entityInfo\"], () => {\n        return getEntityInfo(olsApi, entityType, iri, ontologyId);\n    });\n\n    function generateDisplayItems(item: any) {\n        return (\n            item ?\n                item.length > 1 ?\n                    item.map((element: string, i: any) =>\n                        <dd key={i}>{element.split(\",\")}</dd>)\n                    : item\n                : \"-\"\n        );\n    }\n\n    return (\n        <>\n            <EuiCard\n                title={hasTitle ? entityInfo?.entityTypeName+\" Information\" : \"\"}\n                layout=\"horizontal\"\n            >\n                {isLoadingEntityInfo && <EuiLoadingSpinner size={'s'}/>}\n                {isSuccessEntityInfo &&\n                    <EuiText {...rest}>\n                        {entityInfo?.iri &&\n                          <EuiFlexItem>\n                              <b>Ontology IRI:</b>\n                              <p>{entityInfo.iri.toLocaleString()}</p>\n                          </EuiFlexItem>}\n                        {entityInfo?.versionIri &&\n                          <EuiFlexItem>\n                              <b>Version IRI:</b>\n                              <p>{entityInfo.versionIri.toLocaleString()}</p>\n                          </EuiFlexItem>}\n                        {entityInfo?.id &&\n                          <EuiFlexItem>\n                              <b>Ontology ID:</b>\n                              <p>{entityInfo.id.toLocaleString()}</p>\n                          </EuiFlexItem>}\n                        {entityInfo?.version &&\n                          <EuiFlexItem>\n                              <b>Version:</b>\n                              <p>{entityInfo.version.toLocaleString()}</p>\n                          </EuiFlexItem>}\n                        {entityInfo?.termNum &&\n                          <EuiFlexItem>\n                              <b>Number of terms:</b>\n                              <p>{entityInfo.termNum.toLocaleString()}</p>\n                          </EuiFlexItem>}\n                        {entityInfo?.lastLoad &&\n                          <EuiFlexItem>\n                              <b>Last loaded:</b>\n                              <p>{entityInfo.lastLoad.toLocaleString()}</p>\n                          </EuiFlexItem>}\n                        {entityInfo?.creators &&\n                          <><EuiFlexItem>\n                              <b>Creators:</b>\n                              {generateDisplayItems(entityInfo?.creators)}\n                          </EuiFlexItem><EuiSpacer/></>}\n\n                        {entityInfo?.label &&\n                          <EuiFlexItem>\n                              <b>Label:</b>\n                              <p>{entityInfo?.label}</p>\n                          </EuiFlexItem>}\n                        {entityInfo?.synonyms &&\n                          <><EuiFlexItem>\n                              <b>Synonyms:</b>\n                              {generateDisplayItems(entityInfo?.synonyms)}\n                          </EuiFlexItem><EuiSpacer/></>}\n                        {entityInfo?.subsets &&\n                          <><EuiFlexItem>\n                              <b>In Subsets:</b>\n                              {generateDisplayItems(entityInfo?.subsets)}\n                          </EuiFlexItem><EuiSpacer/></>}\n\n\n                        {entityInfo ? Object.entries(entityInfo.annotations).map(([annoKey, annoVal]) => (\n                            <EuiFlexItem grow={false} key={annoKey}>\n                                <b>{annoKey}:</b>\n                                <p>{generateDisplayItems(annoVal)}</p>\n                            </EuiFlexItem>\n                        )) : \"\"}\n                    </EuiText>\n                }\n                {isErrorEntityInfo && <EuiText>{getErrorMessageToDisplay(errorEntityInfo, \"information\")}</EuiText>}\n            </EuiCard>\n        </>\n    );\n}\n\nexport { EntityInfoWidget };\n","export * from \"./MetadataWidget\";\nexport * from \"./AutocompleteWidget\";\nexport * from \"./JsonApiWidget\";\nexport * from \"./DataContentWidget\";\nexport * from \"./ResourcesWidget\";\nexport * from \"./OntologyInfoWidget\";\nexport * from \"./SearchBarWidget\";\nexport * from \"./SearchResultsListWidget\";\nexport * from \"./EntityInfoWidget\";\n\nexport function getErrorMessageToDisplay(error: any, messagePlaceholder = \"information\"): string {\n    const error_msg : string = error.message;\n    if(error_msg === (\"Response contains 0 elements\")) {\n        return \"No elements found\";\n    }\n    else return `No ${messagePlaceholder} available`;\n}"],"names":["DEFAULT_PAGE_SIZE_OPTIONS"],"mappings":"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"}